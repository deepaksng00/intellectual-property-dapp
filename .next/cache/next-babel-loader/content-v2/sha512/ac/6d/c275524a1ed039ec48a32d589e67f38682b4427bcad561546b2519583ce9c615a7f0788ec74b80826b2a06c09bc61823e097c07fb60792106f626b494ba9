{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/deepaksng00/Documents/intellectual-property-dapp/pages/yourip.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport IntellectualPropertyItem from '../components/IntellectualPropertyItem';\nimport { Link, Router } from '../routes';\nexport default class YourIP extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      trademarks: [],\n      patents: [],\n      designs: [],\n      empty: false\n    });\n  }\n\n  async componentDidMount() {\n    const address = await web3.eth.getAccounts();\n\n    if (address == \"\") {\n      alert(\"Metamask is not setup correctly, please load Metamask and try again!\");\n      Router.pushRoute('/');\n    } else {\n      const trademarks = await factory.methods.getTrademarks(address[0]).call();\n      const patents = await factory.methods.getPatents(address[0]).call();\n      const designs = await factory.methods.getDesigns(address[0]).call();\n      this.setState({\n        trademarks\n      });\n      this.setState({\n        patents\n      });\n      this.setState({\n        designs\n      });\n\n      if (this.state.trademarks.length == 0 && this.state.patents.length == 0 && this.state.designs.length == 0) {\n        this.setState({\n          empty: true\n        });\n      }\n    }\n  }\n\n  async renderIP() {\n    if (this.state.empty) {\n      return /*#__PURE__*/_jsxDEV(IntellectualPropertyItem, {\n        empty: \"True\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 20\n      }, this);\n    }\n\n    var trademarkItems = this.state.trademarks.map(address => {\n      return /*#__PURE__*/_jsxDEV(IntellectualPropertyItem, {\n        typeOfIP: \"Trademark\",\n        address: address,\n        empty: \"True\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }, this);\n    });\n    var patentItems = this.state.patents.map(address => {\n      return /*#__PURE__*/_jsxDEV(IntellectualPropertyItem, {\n        typeOfIP: \"Patent\",\n        address: address,\n        empty: \"True\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 20\n      }, this);\n    });\n    var designItems = this.state.designs.map(address => {\n      return /*#__PURE__*/_jsxDEV(IntellectualPropertyItem, {\n        typeOfIP: \"Design\",\n        address: address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 20\n      }, this);\n    });\n    return new Map([trademarkItems, patentItems, designItems]);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: this.renderIP()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/deepaksng00/Documents/intellectual-property-dapp/pages/yourip.js"],"names":["React","Component","Layout","web3","factory","IntellectualPropertyItem","Link","Router","YourIP","trademarks","patents","designs","empty","componentDidMount","address","eth","getAccounts","alert","pushRoute","methods","getTrademarks","call","getPatents","getDesigns","setState","state","length","renderIP","trademarkItems","map","patentItems","designItems","Map","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport IntellectualPropertyItem from '../components/IntellectualPropertyItem';\nimport { Link, Router } from '../routes';\n\nexport default class YourIP extends Component {\n    state = {\n        trademarks: [],\n        patents: [],\n        designs: [],\n        empty: false\n    }\n\n    async componentDidMount() {\n        const address = await web3.eth.getAccounts();\n        if (address == \"\") {\n            alert(\"Metamask is not setup correctly, please load Metamask and try again!\");\n            Router.pushRoute('/');\n        } else {\n            const trademarks = await factory.methods.getTrademarks(address[0]).call();\n            const patents = await factory.methods.getPatents(address[0]).call();\n            const designs = await factory.methods.getDesigns(address[0]).call();\n            this.setState({ trademarks });\n            this.setState({ patents });\n            this.setState({ designs });\n\n            if (this.state.trademarks.length == 0 && this.state.patents.length == 0 && this.state.designs.length == 0) {\n                this.setState({ empty: true });\n            }\n        }\n    }\n    \n    async renderIP() {\n        if (this.state.empty) {\n            return <IntellectualPropertyItem empty = \"True\" />\n        }\n\n        var trademarkItems = this.state.trademarks.map(address => {\n            return <IntellectualPropertyItem\n                typeOfIP = \"Trademark\" \n                address = { address } \n                empty = \"True\"\n            />   \n        });\n\n        var patentItems = this.state.patents.map(address => {\n            return <IntellectualPropertyItem\n                typeOfIP = \"Patent\"\n                address = { address }\n                empty = \"True\"\n            />\n        });\n\n        var designItems = this.state.designs.map(address => {\n            return <IntellectualPropertyItem\n                typeOfIP = \"Design\"\n                address = { address }\n            />\n        });\n\n        return new Map([ trademarkItems, patentItems, designItems ]);\n    }\n\n    render() {\n        return (\n            <Layout>\n                { this.renderIP() }\n            </Layout>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}