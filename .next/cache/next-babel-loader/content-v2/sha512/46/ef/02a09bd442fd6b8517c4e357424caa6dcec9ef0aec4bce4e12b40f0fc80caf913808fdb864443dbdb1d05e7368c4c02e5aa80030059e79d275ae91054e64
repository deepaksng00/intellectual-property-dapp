{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/deepaksng00/Documents/intellectual-property-dapp/components/FormRegisterPatentConfirm.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Layout from './Layout';\nimport style from '../styles/FormRegisterPatentConfirm.module.css';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\n\nvar FormRegisterPatentConfirm = /*#__PURE__*/function (_Component) {\n  _inherits(FormRegisterPatentConfirm, _Component);\n\n  var _super = _createSuper(FormRegisterPatentConfirm);\n\n  function FormRegisterPatentConfirm() {\n    var _this;\n\n    _classCallCheck(this, FormRegisterPatentConfirm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"continueRegistration\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var values, compiled_patent, inventorAddress_full, patents, numOfPatents, address, patent, filingDate_UNIX, patent_date_obj, filingDate, owner, status, status_date_UNIX, status_date_object, status_date, renewal_date_UNIX, renewal_date_obj, renewal_date, inventorAddress, title;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                values = _this.props.values;\n                event.preventDefault();\n                compiled_patent = require(\"../ethereum/build/Patent.json\");\n                alert(\"Creating IP\");\n                inventorAddress_full = values.addressLine1_patent + \", \" + values.addressLine2_patent + \", \" + values.addressLineCity_patent + \", \" + values.addressLineCounty_patent + \", \" + values.addressLinePostcode_patent + \", \" + values.addressLineCountry_patent;\n                _context.next = 7;\n                return factory.methods.createPatent(values.patentTitle, inventorAddress_full).send({\n                  from: values.address[0],\n                  gasLimit: \"5000000\"\n                });\n\n              case 7:\n                _context.next = 9;\n                return factory.methods.getPatents().call();\n\n              case 9:\n                patents = _context.sent;\n                _context.next = 12;\n                return factory.methods.getNumOfPatents().call();\n\n              case 12:\n                numOfPatents = _context.sent;\n                address = patents[numOfPatents - 1];\n                _context.next = 16;\n                return new web3.eth.Contract(compiled_patent.abi, address);\n\n              case 16:\n                patent = _context.sent;\n                _context.next = 19;\n                return patent.methods.getFilingDate().call();\n\n              case 19:\n                filingDate_UNIX = _context.sent;\n                patent_date_obj = new Date(filingDate_UNIX * 1000);\n                filingDate = patent_date_obj.getFullYear().toString() + \"-\" + (patent_date_obj.getMonth() + 1).toString() + \"-\" + patent_date_obj.getDate().toString();\n                _context.next = 24;\n                return patent.methods.getOwner().call();\n\n              case 24:\n                owner = _context.sent;\n                _context.next = 27;\n                return patent.methods.getStatus().call();\n\n              case 27:\n                status = _context.sent;\n                _context.next = 30;\n                return patent.methods.getStatusDate().call();\n\n              case 30:\n                status_date_UNIX = _context.sent;\n                status_date_object = new Date(status_date_UNIX * 1000);\n                status_date = status_date_object.getFullYear().toString() + \"-\" + (status_date_object.getMonth() + 1).toString() + \"-\" + status_date_object.getDate().toString();\n                _context.next = 35;\n                return patent.methods.getExpirationDate().call();\n\n              case 35:\n                renewal_date_UNIX = _context.sent;\n                renewal_date_obj = new Date(renewal_date_UNIX * 1000);\n                renewal_date = renewal_date_obj.getFullYear().toString() + \"-\" + (renewal_date_obj.getMonth() + 1).toString() + \"-\" + renewal_date_obj.getDate().toString();\n                _context.next = 40;\n                return patent.methods.getInventorAddress().call();\n\n              case 40:\n                inventorAddress = _context.sent;\n                _context.next = 43;\n                return patent.methods.getTitle().call();\n\n              case 43:\n                title = _context.sent;\n                console.log(\"Address: \" + address);\n                console.log(\"Owner: \" + owner);\n                console.log(\"Status: \" + status);\n                console.log(\"Status last changed: \" + status_date);\n                console.log(\"Filing date: \" + filingDate); // console.log(\"Publication date: \" + publicationDate);\n\n                console.log(\"Renewal date: \" + renewal_date);\n                console.log(\"Inventor address: \" + inventorAddress);\n                console.log(\"Title: \" + title);\n\n                _this.props.changeForm('ip_addr', address);\n\n                _this.props.changeForm('address', owner);\n\n                _this.props.nextStep(1);\n\n              case 55:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"backRegistration\", function (e) {\n      e.preventDefault();\n\n      _this.props.previousStep(1);\n    });\n\n    return _this;\n  }\n\n  _createClass(FormRegisterPatentConfirm, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var values = this.props.values;\n      var nextStep = this.props.nextStep;\n      return /*#__PURE__*/_jsxDEV(Layout, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: style.form,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Confirm your details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.addressLabel,\n            children: \"Address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.address,\n            type: \"text\",\n            value: values.address,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.dateLabel,\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.date,\n            type: \"text\",\n            value: values.currentDate,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.typeOfIPLabel,\n            children: \"Type of IP:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.typeOfIP,\n            type: \"text\",\n            value: values.typeOfIP,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.patentTitleLabel,\n            children: \"Title:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.patentTitle,\n            type: \"text\",\n            value: values.patentTitle,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.address1Label,\n            children: \"Address line 1:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"address1\",\n            className: style.address1,\n            type: \"text\",\n            value: values.address1_patent,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.address2Label,\n            children: \"Address line 2:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"address2\",\n            className: style.address2,\n            type: \"text\",\n            value: values.address2_patent,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.addressCityLabel,\n            children: \"City:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"city\",\n            className: style.city,\n            type: \"text\",\n            value: values.addressCity_patent,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.addressCountyLabel,\n            children: \"County:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"county\",\n            className: style.county,\n            type: \"text\",\n            value: values.addressCounty_patent,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.addressPostcodeLabel,\n            children: \"Postcode:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"postcode\",\n            className: style.postcode,\n            type: \"text\",\n            value: values.addressPostcode_patent,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.addressCountryLabel,\n            children: \"Country:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"country\",\n            className: style.country,\n            type: \"text\",\n            value: values.addressCountry_patent,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: style.back,\n            type: \"button\",\n            onClick: this.backRegistration,\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: style.next,\n            type: \"button\",\n            onClick: this.continueRegistration,\n            children: \"Register Patent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return FormRegisterPatentConfirm;\n}(Component);\n\nexport default FormRegisterPatentConfirm;","map":{"version":3,"sources":["/Users/deepaksng00/Documents/intellectual-property-dapp/components/FormRegisterPatentConfirm.js"],"names":["React","Component","Layout","style","Link","Router","web3","factory","FormRegisterPatentConfirm","event","values","props","preventDefault","compiled_patent","require","alert","inventorAddress_full","addressLine1_patent","addressLine2_patent","addressLineCity_patent","addressLineCounty_patent","addressLinePostcode_patent","addressLineCountry_patent","methods","createPatent","patentTitle","send","from","address","gasLimit","getPatents","call","patents","getNumOfPatents","numOfPatents","eth","Contract","abi","patent","getFilingDate","filingDate_UNIX","patent_date_obj","Date","filingDate","getFullYear","toString","getMonth","getDate","getOwner","owner","getStatus","status","getStatusDate","status_date_UNIX","status_date_object","status_date","getExpirationDate","renewal_date_UNIX","renewal_date_obj","renewal_date","getInventorAddress","inventorAddress","getTitle","title","console","log","changeForm","nextStep","e","previousStep","form","addressLabel","dateLabel","date","currentDate","typeOfIPLabel","typeOfIP","patentTitleLabel","address1Label","address1","address1_patent","address2Label","address2","address2_patent","addressCityLabel","city","addressCity_patent","addressCountyLabel","county","addressCounty_patent","addressPostcodeLabel","postcode","addressPostcode_patent","addressCountryLabel","country","addressCountry_patent","back","backRegistration","next","continueRegistration"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from './Layout';\nimport style from '../styles/FormRegisterPatentConfirm.module.css';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\n\nclass FormRegisterPatentConfirm extends Component {\n  continueRegistration = async (event) => {\n    const { values } = this.props;\n    event.preventDefault();\n    const compiled_patent = require(\"../ethereum/build/Patent.json\");\n    alert(\"Creating IP\");\n\n    const inventorAddress_full = values.addressLine1_patent + \", \" + values.addressLine2_patent + \", \" + values.addressLineCity_patent + \", \" + values.addressLineCounty_patent + \", \" + values.addressLinePostcode_patent + \", \" + values.addressLineCountry_patent;\n\n    await factory.methods.createPatent(values.patentTitle, inventorAddress_full).send({\n       from: values.address[0],\n       gasLimit: \"5000000\"\n     });\n\n     const patents = await factory.methods.getPatents().call();\n     const numOfPatents = await factory.methods.getNumOfPatents().call();\n     const address = patents[numOfPatents-1];\n     const patent = await new web3.eth.Contract(compiled_patent.abi, address);\n\n     const filingDate_UNIX = await patent.methods.getFilingDate().call();\n     const patent_date_obj = new Date(filingDate_UNIX * 1000);\n     const filingDate = patent_date_obj.getFullYear().toString() + \"-\" + (patent_date_obj.getMonth()+1).toString() + \"-\" + patent_date_obj.getDate().toString();\n     const owner = await patent.methods.getOwner().call();\n     const status = await patent.methods.getStatus().call();\n     // const publicationDate_UNIX = await patent.methods.getPublicationDate().call();\n     // const publicationDate_obj = new Date(publicationDate_UNIX * 1000);\n    // const publicationDate = publicationDate_obj.getFullYear().toString() + \"-\" + (publicationDate_obj.getMonth()+1).toString() + \"-\" + publicationDate_obj.getDate().toString();\n    const status_date_UNIX = await patent.methods.getStatusDate().call();\n    const status_date_object = new Date(status_date_UNIX * 1000);\n    const status_date = status_date_object.getFullYear().toString() + \"-\" + (status_date_object.getMonth()+1).toString() + \"-\" + status_date_object.getDate().toString();\n    const renewal_date_UNIX = await patent.methods.getExpirationDate().call();\n    const renewal_date_obj = new Date(renewal_date_UNIX * 1000);\n    const renewal_date = renewal_date_obj.getFullYear().toString() + \"-\" + (renewal_date_obj.getMonth()+1).toString() + \"-\" + renewal_date_obj.getDate().toString();\n    const inventorAddress = await patent.methods.getInventorAddress().call();\n    const title = await patent.methods.getTitle().call();\n\n    console.log(\"Address: \" + address);\n    console.log(\"Owner: \" + owner);\n    console.log(\"Status: \" + status);\n    console.log(\"Status last changed: \" + status_date)\n    console.log(\"Filing date: \" + filingDate);\n    // console.log(\"Publication date: \" + publicationDate);\n    console.log(\"Renewal date: \" + renewal_date);\n    console.log(\"Inventor address: \" + inventorAddress);\n    console.log(\"Title: \" + title);\n\n    this.props.changeForm('ip_addr', address);\n    this.props.changeForm('address', owner);\n\n    this.props.nextStep(1);\n  }\n\n  backRegistration = e => {\n    e.preventDefault();\n    this.props.previousStep(1);\n  }\n\n  async componentDidMount() {\n    // const address = await web3.eth.getAccounts();\n    // if (address == \"\") {\n    //   alert(\"Metamask is not setup correctly, please load Metamask and try again!\");\n    //   Router.pushRoute('/');\n    // }\n  }\n\n  render() {\n    const { values } = this.props;\n    const { nextStep } = this.props;\n\n    return (\n      <Layout>\n        <form className={style.form}>\n          <h2>Confirm your details</h2>\n          <p className={style.addressLabel}>Address:</p>\n          <input className={style.address} type='text' value={values.address} readOnly />\n          <p className={style.dateLabel}>Date:</p>\n          <input className={style.date} type='text' value={values.currentDate} readOnly />\n          <p className={style.typeOfIPLabel}>Type of IP:</p>\n          <input className={style.typeOfIP} type='text' value={values.typeOfIP} readOnly />\n          <p className={style.patentTitleLabel}>Title:</p>\n          <input className={style.patentTitle} type='text' value={values.patentTitle} readOnly />\n          <p className={style.address1Label}>Address line 1:</p>\n          <input id=\"address1\" className={style.address1} type='text' value={values.address1_patent} readOnly />\n          <p className={style.address2Label}>Address line 2:</p>\n          <input id=\"address2\" className={style.address2} type='text' value={values.address2_patent} readOnly />\n          <p className={style.addressCityLabel}>City:</p>\n          <input id=\"city\" className={style.city} type='text' value={values.addressCity_patent} readOnly />\n          <p className={style.addressCountyLabel}>County:</p>\n          <input id=\"county\" className={style.county} type='text' value={values.addressCounty_patent} readOnly />\n          <p className={style.addressPostcodeLabel}>Postcode:</p>\n          <input id=\"postcode\" className={style.postcode} type='text' value={values.addressPostcode_patent} readOnly />\n          <p className={style.addressCountryLabel}>Country:</p>\n          <input id=\"country\" className={style.country} type='text' value={values.addressCountry_patent} readOnly />\n          <button className={style.back} type='button' onClick={ this.backRegistration }>Back</button>\n          <button className={style.next} type='button' onClick={ this.continueRegistration }>Register Patent</button>\n      </form>\n      </Layout>\n    );\n  }\n}\n\nexport default FormRegisterPatentConfirm;\n"]},"metadata":{},"sourceType":"module"}