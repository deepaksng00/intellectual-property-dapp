{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/deepaksng00/Documents/intellectual-property-dapp/pages/yourip.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport IntellectualPropertyItem from '../components/IntellectualPropertyItem';\nimport { Link, Router } from '../routes';\nexport default class YourIP extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      trademarks: [],\n      patents: [],\n      designs: [],\n      isEmpty: false\n    });\n  }\n\n  async componentDidMount() {\n    const address = await web3.eth.getAccounts();\n\n    if (address == \"\") {\n      alert(\"Metamask is not setup correctly, please load Metamask and try again!\");\n      Router.pushRoute('/');\n    } else {\n      const trademarks = await factory.methods.getTrademarks(address[0]).call();\n      const patents = await factory.methods.getPatents(address[0]).call();\n      const designs = await factory.methods.getDesigns(address[0]).call();\n      this.setState({\n        trademarks\n      });\n      this.setState({\n        patents\n      });\n      this.setState({\n        designs\n      }); // if (trademarks.length == 0 && patents.length == 0 && designs.length == 0) {\n      //     this.setState({ empty: true });\n      // }\n    }\n  }\n\n  renderIP(isEmpty) {\n    console.log(isEmpty);\n\n    if (isEmpty == true) {\n      return /*#__PURE__*/_jsxDEV(IntellectualPropertyItem, {\n        empty: \"True\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 20\n      }, this);\n    } else {\n      var trademarkItems = this.state.trademarks.map(address => {\n        return /*#__PURE__*/_jsxDEV(IntellectualPropertyItem, {\n          typeOfIP: \"Trademark\",\n          address: address,\n          empty: \"False\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 24\n        }, this);\n      });\n      var patentItems = this.state.patents.map(address => {\n        return /*#__PURE__*/_jsxDEV(IntellectualPropertyItem, {\n          typeOfIP: \"Patent\",\n          address: address,\n          empty: \"False\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 24\n        }, this);\n      });\n      var designItems = this.state.designs.map(address => {\n        return /*#__PURE__*/_jsxDEV(IntellectualPropertyItem, {\n          typeOfIP: \"Design\",\n          address: address,\n          empty: \"False\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 24\n        }, this);\n      });\n      return new Map([trademarkItems, patentItems, designItems]);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: this.renderIP(this.state.isEmpty)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/deepaksng00/Documents/intellectual-property-dapp/pages/yourip.js"],"names":["React","Component","Layout","web3","factory","IntellectualPropertyItem","Link","Router","YourIP","trademarks","patents","designs","isEmpty","componentDidMount","address","eth","getAccounts","alert","pushRoute","methods","getTrademarks","call","getPatents","getDesigns","setState","renderIP","console","log","trademarkItems","state","map","patentItems","designItems","Map","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\nimport IntellectualPropertyItem from '../components/IntellectualPropertyItem';\nimport { Link, Router } from '../routes';\n\nexport default class YourIP extends Component {\n    state = {\n        trademarks: [],\n        patents: [],\n        designs: [],\n        isEmpty: false\n    }\n\n    async componentDidMount() {\n        const address = await web3.eth.getAccounts();\n        if (address == \"\") {\n            alert(\"Metamask is not setup correctly, please load Metamask and try again!\");\n            Router.pushRoute('/');\n        } else {\n            const trademarks = await factory.methods.getTrademarks(address[0]).call();\n            const patents = await factory.methods.getPatents(address[0]).call();\n            const designs = await factory.methods.getDesigns(address[0]).call();\n            this.setState({ trademarks });\n            this.setState({ patents });\n            this.setState({ designs });\n\n            // if (trademarks.length == 0 && patents.length == 0 && designs.length == 0) {\n            //     this.setState({ empty: true });\n            // }\n        }\n    }\n    \n    renderIP(isEmpty) {\n        console.log(isEmpty)\n        if (isEmpty == true) {\n            return <IntellectualPropertyItem empty = \"True\" />\n        } else {\n            var trademarkItems = this.state.trademarks.map(address => {\n                return <IntellectualPropertyItem\n                    typeOfIP = \"Trademark\" \n                    address = { address } \n                    empty = \"False\"\n                />   \n            });\n    \n            var patentItems = this.state.patents.map(address => {\n                return <IntellectualPropertyItem\n                    typeOfIP = \"Patent\"\n                    address = { address }\n                    empty = \"False\"\n                />\n            });\n    \n            var designItems = this.state.designs.map(address => {\n                return <IntellectualPropertyItem\n                    typeOfIP = \"Design\"\n                    address = { address }\n                    empty = \"False\"\n                />\n            });\n    \n            return new Map([ trademarkItems, patentItems, designItems ]);\n        }\n    }\n\n    render() {\n        return (\n            <Layout>\n                { this.renderIP(this.state.isEmpty) }\n            </Layout>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}