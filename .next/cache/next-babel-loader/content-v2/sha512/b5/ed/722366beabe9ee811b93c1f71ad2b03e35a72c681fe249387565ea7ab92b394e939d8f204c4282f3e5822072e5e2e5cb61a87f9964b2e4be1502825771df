{"ast":null,"code":"import _regeneratorRuntime from \"/Users/deepaksng00/Documents/intellectual-property-dapp/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/deepaksng00/Documents/intellectual-property-dapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport web3 from './web3';\nimport IntellectualProperty from '../build/contracts/IntellectualProperty.json';\n\nvar getContract = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var networkID, networkData, contract, address, abi;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3.eth.net.getId();\n\n          case 2:\n            networkID = _context.sent;\n            networkData = IntellectualProperty.networks[networkId];\n\n            if (networkData) {\n              address = networkData.address;\n              abi = IntellectualProperty.abi;\n              contract = new web3.eth.Contract(IntellectualProperty.abi, address);\n            } else {\n              alert(\"Smart contract not deployed on this network, try changing network.\");\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getContract() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default contract;","map":{"version":3,"sources":["/Users/deepaksng00/Documents/intellectual-property-dapp/ethereum/intellectualproperty.js"],"names":["web3","IntellectualProperty","getContract","eth","net","getId","networkID","networkData","networks","networkId","address","abi","contract","Contract","alert"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,oBAAP,MAAiC,8CAAjC;;AAGA,IAAMC,WAAW;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEKF,IAAI,CAACG,GAAL,CAASC,GAAT,CAAaC,KAAb,EAFL;;AAAA;AAEbC,YAAAA,SAFa;AAGbC,YAAAA,WAHa,GAGCN,oBAAoB,CAACO,QAArB,CAA8BC,SAA9B,CAHD;;AAMnB,gBAAGF,WAAH,EAAgB;AACTG,cAAAA,OADS,GACCH,WAAW,CAACG,OADb;AAETC,cAAAA,GAFS,GAEHV,oBAAoB,CAACU,GAFlB;AAIfC,cAAAA,QAAQ,GAAG,IAAIZ,IAAI,CAACG,GAAL,CAASU,QAAb,CACVZ,oBAAoB,CAACU,GADX,EAEVD,OAFU,CAAX;AAIA,aARD,MAQO;AACNI,cAAAA,KAAK,CAAC,oEAAD,CAAL;AACA;;AAhBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXZ,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAoBA,eAAeU,QAAf","sourcesContent":["import web3 from './web3';\nimport IntellectualProperty from '../build/contracts/IntellectualProperty.json';\n\n\nconst getContract = async () => {\n\t/* --- Creating handle to access factory contract on the blockchain --- */\n\tconst networkID = await web3.eth.net.getId();\n\tconst networkData = IntellectualProperty.networks[networkId];\n\tlet contract;\n\n\tif(networkData) {\n\t\tconst address = networkData.address;\n\t\tconst abi = IntellectualProperty.abi;\n\n\t\tcontract = new web3.eth.Contract(\n\t\t\tIntellectualProperty.abi,\n\t\t\taddress\n\t\t);\n\t} else {\n\t\talert(\"Smart contract not deployed on this network, try changing network.\");\n\t}\n}\n\n\nexport default contract;\n"]},"metadata":{},"sourceType":"module"}