{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/deepaksng00/Documents/intellectual-property-dapp/components/FormRegisterPatentConfirm.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from './Layout';\nimport style from '../styles/FormRegisterPatentConfirm.module.css';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\n\nclass FormRegisterPatentConfirm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"continueRegistration\", async event => {\n      const {\n        values\n      } = this.props;\n      event.preventDefault();\n\n      const compiled_patent = require(\"../ethereum/build/Patent.json\");\n\n      alert(\"Creating IP\");\n      const inventorAddress_full = values.address1_patent + \", \" + values.address2_patent + \", \" + values.addressCity_patent + \", \" + values.addressCounty_patent + \", \" + values.addressPostcode_patent + \", \" + values.addressCountry_patent;\n      await factory.methods.createPatent(values.patentTitle, inventorAddress_full).send({\n        from: values.address[0],\n        gasLimit: \"5000000\"\n      });\n      const patents = await factory.methods.getPatents().call();\n      const numOfPatents = await factory.methods.getNumOfPatents().call();\n      const address = patents[numOfPatents - 1];\n      const patent = await new web3.eth.Contract(compiled_patent.abi, address);\n      const filingDate_UNIX = await patent.methods.getFilingDate().call();\n      const patent_date_obj = new Date(filingDate_UNIX * 1000);\n      const filingDate = patent_date_obj.getFullYear().toString() + \"-\" + (patent_date_obj.getMonth() + 1).toString() + \"-\" + patent_date_obj.getDate().toString();\n      const owner = await patent.methods.getOwner().call();\n      const status = await patent.methods.getStatus().call(); // const publicationDate_UNIX = await patent.methods.getPublicationDate().call();\n      // const publicationDate_obj = new Date(publicationDate_UNIX * 1000);\n      // const publicationDate = publicationDate_obj.getFullYear().toString() + \"-\" + (publicationDate_obj.getMonth()+1).toString() + \"-\" + publicationDate_obj.getDate().toString();\n\n      const status_date_UNIX = await patent.methods.getStatusDate().call();\n      const status_date_object = new Date(status_date_UNIX * 1000);\n      const status_date = status_date_object.getFullYear().toString() + \"-\" + (status_date_object.getMonth() + 1).toString() + \"-\" + status_date_object.getDate().toString();\n      const renewal_date_UNIX = await patent.methods.getExpirationDate().call();\n      const renewal_date_obj = new Date(renewal_date_UNIX * 1000);\n      const renewal_date = renewal_date_obj.getFullYear().toString() + \"-\" + (renewal_date_obj.getMonth() + 1).toString() + \"-\" + renewal_date_obj.getDate().toString();\n      const inventorAddress = await patent.methods.getInventorAddress().call();\n      const title = await patent.methods.getTitle().call();\n      console.log(\"Address: \" + address);\n      console.log(\"Owner: \" + owner);\n      console.log(\"Status: \" + status);\n      console.log(\"Status last changed: \" + status_date);\n      console.log(\"Filing date: \" + filingDate); // console.log(\"Publication date: \" + publicationDate);\n\n      console.log(\"Renewal date: \" + renewal_date);\n      console.log(\"Inventor address: \" + inventorAddress);\n      console.log(\"Title: \" + title);\n      this.props.changeForm('ip_addr', address);\n      this.props.changeForm('address', owner);\n      this.props.nextStep(1);\n    });\n\n    _defineProperty(this, \"backRegistration\", e => {\n      e.preventDefault();\n      this.props.previousStep(1);\n    });\n  }\n\n  async componentDidMount() {// const address = await web3.eth.getAccounts();\n    // if (address == \"\") {\n    //   alert(\"Metamask is not setup correctly, please load Metamask and try again!\");\n    //   Router.pushRoute('/');\n    // }\n  }\n\n  render() {\n    const {\n      values\n    } = this.props;\n    const {\n      nextStep\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: style.form,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Confirm your details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: style.addressLabel,\n          children: \"Address:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: style.address,\n          type: \"text\",\n          value: values.address,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: style.dateLabel,\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: style.date,\n          type: \"text\",\n          value: values.currentDate,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: style.typeOfIPLabel,\n          children: \"Type of IP:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: style.typeOfIP,\n          type: \"text\",\n          value: values.typeOfIP,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: style.patentTitleLabel,\n          children: \"Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: style.patentTitle,\n          type: \"text\",\n          value: values.patentTitle,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: style.address1Label,\n          children: \"Address line 1:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"address1\",\n          className: style.address1,\n          type: \"text\",\n          value: values.address1_patent,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: style.address2Label,\n          children: \"Address line 2:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"address2\",\n          className: style.address2,\n          type: \"text\",\n          value: values.address2_patent,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: style.addressCityLabel,\n          children: \"City:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"city\",\n          className: style.city,\n          type: \"text\",\n          value: values.addressCity_patent,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: style.addressCountyLabel,\n          children: \"County:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"county\",\n          className: style.county,\n          type: \"text\",\n          value: values.addressCounty_patent,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: style.addressPostcodeLabel,\n          children: \"Postcode:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"postcode\",\n          className: style.postcode,\n          type: \"text\",\n          value: values.addressPostcode_patent,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: style.addressCountryLabel,\n          children: \"Country:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"country\",\n          className: style.country,\n          type: \"text\",\n          value: values.addressCountry_patent,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: style.back,\n          type: \"button\",\n          onClick: this.backRegistration,\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: style.next,\n          type: \"button\",\n          onClick: this.continueRegistration,\n          children: \"Register Patent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default FormRegisterPatentConfirm;","map":{"version":3,"sources":["/Users/deepaksng00/Documents/intellectual-property-dapp/components/FormRegisterPatentConfirm.js"],"names":["React","Component","Layout","style","Link","Router","web3","factory","FormRegisterPatentConfirm","event","values","props","preventDefault","compiled_patent","require","alert","inventorAddress_full","address1_patent","address2_patent","addressCity_patent","addressCounty_patent","addressPostcode_patent","addressCountry_patent","methods","createPatent","patentTitle","send","from","address","gasLimit","patents","getPatents","call","numOfPatents","getNumOfPatents","patent","eth","Contract","abi","filingDate_UNIX","getFilingDate","patent_date_obj","Date","filingDate","getFullYear","toString","getMonth","getDate","owner","getOwner","status","getStatus","status_date_UNIX","getStatusDate","status_date_object","status_date","renewal_date_UNIX","getExpirationDate","renewal_date_obj","renewal_date","inventorAddress","getInventorAddress","title","getTitle","console","log","changeForm","nextStep","e","previousStep","componentDidMount","render","form","addressLabel","dateLabel","date","currentDate","typeOfIPLabel","typeOfIP","patentTitleLabel","address1Label","address1","address2Label","address2","addressCityLabel","city","addressCountyLabel","county","addressPostcodeLabel","postcode","addressCountryLabel","country","back","backRegistration","next","continueRegistration"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from './Layout';\nimport style from '../styles/FormRegisterPatentConfirm.module.css';\nimport { Link, Router } from '../routes';\nimport web3 from '../ethereum/web3';\nimport factory from '../ethereum/factory';\n\nclass FormRegisterPatentConfirm extends Component {\n  continueRegistration = async (event) => {\n    const { values } = this.props;\n    event.preventDefault();\n    const compiled_patent = require(\"../ethereum/build/Patent.json\");\n    alert(\"Creating IP\");\n\n    const inventorAddress_full = values.address1_patent + \", \" + values.address2_patent + \", \" + values.addressCity_patent + \", \" + values.addressCounty_patent + \", \" + values.addressPostcode_patent + \", \" + values.addressCountry_patent;\n\n    await factory.methods.createPatent(values.patentTitle, inventorAddress_full).send({\n     from: values.address[0],\n     gasLimit: \"5000000\"\n    });\n\n    const patents = await factory.methods.getPatents().call();\n    const numOfPatents = await factory.methods.getNumOfPatents().call();\n    const address = patents[numOfPatents-1];\n    const patent = await new web3.eth.Contract(compiled_patent.abi, address);\n\n    const filingDate_UNIX = await patent.methods.getFilingDate().call();\n    const patent_date_obj = new Date(filingDate_UNIX * 1000);\n    const filingDate = patent_date_obj.getFullYear().toString() + \"-\" + (patent_date_obj.getMonth()+1).toString() + \"-\" + patent_date_obj.getDate().toString();\n    const owner = await patent.methods.getOwner().call();\n    const status = await patent.methods.getStatus().call();\n    // const publicationDate_UNIX = await patent.methods.getPublicationDate().call();\n    // const publicationDate_obj = new Date(publicationDate_UNIX * 1000);\n    // const publicationDate = publicationDate_obj.getFullYear().toString() + \"-\" + (publicationDate_obj.getMonth()+1).toString() + \"-\" + publicationDate_obj.getDate().toString();\n    const status_date_UNIX = await patent.methods.getStatusDate().call();\n    const status_date_object = new Date(status_date_UNIX * 1000);\n    const status_date = status_date_object.getFullYear().toString() + \"-\" + (status_date_object.getMonth()+1).toString() + \"-\" + status_date_object.getDate().toString();\n    const renewal_date_UNIX = await patent.methods.getExpirationDate().call();\n    const renewal_date_obj = new Date(renewal_date_UNIX * 1000);\n    const renewal_date = renewal_date_obj.getFullYear().toString() + \"-\" + (renewal_date_obj.getMonth()+1).toString() + \"-\" + renewal_date_obj.getDate().toString();\n    const inventorAddress = await patent.methods.getInventorAddress().call();\n    const title = await patent.methods.getTitle().call();\n\n    console.log(\"Address: \" + address);\n    console.log(\"Owner: \" + owner);\n    console.log(\"Status: \" + status);\n    console.log(\"Status last changed: \" + status_date)\n    console.log(\"Filing date: \" + filingDate);\n    // console.log(\"Publication date: \" + publicationDate);\n    console.log(\"Renewal date: \" + renewal_date);\n    console.log(\"Inventor address: \" + inventorAddress);\n    console.log(\"Title: \" + title);\n\n    this.props.changeForm('ip_addr', address);\n    this.props.changeForm('address', owner);\n\n    this.props.nextStep(1);\n  }\n\n  backRegistration = e => {\n    e.preventDefault();\n    this.props.previousStep(1);\n  }\n\n  async componentDidMount() {\n    // const address = await web3.eth.getAccounts();\n    // if (address == \"\") {\n    //   alert(\"Metamask is not setup correctly, please load Metamask and try again!\");\n    //   Router.pushRoute('/');\n    // }\n  }\n\n  render() {\n    const { values } = this.props;\n    const { nextStep } = this.props;\n\n    return (\n      <Layout>\n        <form className={style.form}>\n          <h2>Confirm your details</h2>\n          <p className={style.addressLabel}>Address:</p>\n          <input className={style.address} type='text' value={values.address} readOnly />\n          <p className={style.dateLabel}>Date:</p>\n          <input className={style.date} type='text' value={values.currentDate} readOnly />\n          <p className={style.typeOfIPLabel}>Type of IP:</p>\n          <input className={style.typeOfIP} type='text' value={values.typeOfIP} readOnly />\n          <p className={style.patentTitleLabel}>Title:</p>\n          <input className={style.patentTitle} type='text' value={values.patentTitle} readOnly />\n          <p className={style.address1Label}>Address line 1:</p>\n          <input id=\"address1\" className={style.address1} type='text' value={values.address1_patent} readOnly />\n          <p className={style.address2Label}>Address line 2:</p>\n          <input id=\"address2\" className={style.address2} type='text' value={values.address2_patent} readOnly />\n          <p className={style.addressCityLabel}>City:</p>\n          <input id=\"city\" className={style.city} type='text' value={values.addressCity_patent} readOnly />\n          <p className={style.addressCountyLabel}>County:</p>\n          <input id=\"county\" className={style.county} type='text' value={values.addressCounty_patent} readOnly />\n          <p className={style.addressPostcodeLabel}>Postcode:</p>\n          <input id=\"postcode\" className={style.postcode} type='text' value={values.addressPostcode_patent} readOnly />\n          <p className={style.addressCountryLabel}>Country:</p>\n          <input id=\"country\" className={style.country} type='text' value={values.addressCountry_patent} readOnly />\n          <button className={style.back} type='button' onClick={ this.backRegistration }>Back</button>\n          <button className={style.next} type='button' onClick={ this.continueRegistration }>Register Patent</button>\n      </form>\n      </Layout>\n    );\n  }\n}\n\nexport default FormRegisterPatentConfirm;\n"]},"metadata":{},"sourceType":"module"}